;;6
;;a) test if a list is linear

(defun checklist (list)
  (cond ((null list) t)
      ((not (numberp (first list))) nil)
      (t (checklist (rest list)))))
(print (checklist '(r 4 5 s)))
(print (checklist '(3 5 1)))
(print (checklist '()))

;;b)replace first occurence of E in list with O

(defun repl (list e o)
  (cond ((null list) '() )
  ((equal (car list) e) (cons o (cdr list)))
  (t (cons (car list) (repl (cdr list) e o)))))
(print (repl '(2 4 5 2 4 6) 4  'y))

;;c) Write a function to replace each sublist of a list with its last element.

;; varianta 1

(defun rep(list)
    (cond
        ((null list) nil)
        ((listp (car list)) (rep (cons (car (reverse (car list))) (rep (cdr list)))))
        (t (cons (car list) (rep (cdr list))))
    )
)
(print (rep '(a (b c) (d (e (f (g j)))) h)))

;;varianta 2

(defun my_append (l k)
    (if (null l) 
        k
        (cons (car l) (my_append (cdr l) k))
    )
)
(print (my_append '(2 5 6) '3))

(defun my_reverse (l)
    (if (null l)
        nil
        (my_append (my_reverse (cdr l)) (list (car l)))
    )        
)
(print (my_reverse '(2 5 4 6)))

(defun last_element (l)
	(if (listp l) 
        (last_element (car (my_reverse l)))
        l
    )
)

(print (last_element '(1 2 (3 (4 5)))))
; => 5

(defun _reduce (l)
	(cond
		((null l) nil)
		((listp (car l)) (cons (last_element (car l)) (_reduce (cdr l))))
		(T (cons (car l) (_reduce (cdr l))))
	)
)

(print (_reduce '(a (b c) (d (e (f))))))

;;d) Write a function to merge two sorted lists without keeping double values.

(defun merge1 (l1 l2)
  (cond
   ((null l2) l1)
   ((null l1) l2)
   ((< (car l1) (car l2)) (cons (car l1) (merge1 (cdr l1) l2)))
   ((> (car l1) (car l2)) (cons (car l2) (merge1 l1 (cdr l2))))
   (t (cons (car l1) (merge1 (cdr l1) (cdr l2))))
))
(print (merge1 '() '(2 3 5)))
(print (merge1 '(3 5 6) '()))
(print (merge1 '(2 4 6 7) '(3 4 5 6 9)))

